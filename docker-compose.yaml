# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

# Basic Airflow cluster configuration for CeleryExecutor with Redis and PostgreSQL.
# --- Includes MLflow Server ---
#
# WARNING: This configuration is for local development/testing. Do not use it in a production deployment without review.
# [...] (Keep existing comments about variables)
---
x-airflow-common:
  &airflow-common
  # Use an image based on a newer Python version
  image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.9.2-python3.9}
  # build: . # Keep build commented out if using official image
  environment:
    &airflow-common-env
    # --- Airflow Core Settings ---
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow # Airflow uses postgres service
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: '' # Default, should be set for security if needed
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'

    # --- BASE Python Dependencies (Scheduler, Webserver, Triggerer, Worker Base) ---
    # Keep this lean: Only include core providers, clients needed everywhere (GCS, DVC, MLflow, Pinecone), basic utils
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-apache-airflow-providers-postgres apache-airflow-providers-redis apache-airflow-providers-celery psycopg2-binary redis celery>=5.2.0 beautifulsoup4 PyPDF2 pinecone python-dotenv mlflow google-cloud-storage dvc[gs] requests==2.31.0 gunicorn}

    # --- Environment Variables Passed to Tasks (from Host or .env) ---
    OPENAI_API_KEY: ${OPENAI_API_KEY}
    LANGSMITH_API_KEY: ${LANGSMITH_API_KEY}
    LANGSMITH_PROJECT: ${LANGSMITH_PROJECT}
    LANGSMITH_TRACING: ${LANGSMITH_TRACING}
    PINECONE_API_KEY: ${PINECONE_API_KEY}
    PINECONE_INDEX_NAME: ${PINECONE_INDEX_NAME}
    PINECONE_ENVIRONMENT: ${PINECONE_ENVIRONMENT}
    # --- !!! UPDATED MLFLOW URI !!! ---
    # Point to the mlflow-server service within the Docker network on port 5000
    MLFLOW_TRACKING_URI: ${MLFLOW_TRACKING_URI:-http://mlflow-server:5000}
    HEVY_API_KEY: ${HEVY_API_KEY}
    # GCS Bucket for MLflow Artifacts (Must have write access)
    MLFLOW_ARTIFACT_ROOT: ${MLFLOW_ARTIFACT_ROOT:-gs://ragllm-454718-mlflow-artifacts} # <<< ENSURE THIS BUCKET EXISTS

  # --- Volume Mounts ---
  volumes:
    # Mount entire project directory to /opt/airflow/app
    - ${AIRFLOW_PROJ_DIR:-.}:/opt/airflow/app
    # Keep specific mounts needed by Airflow itself
    - ${AIRFLOW_PROJ_DIR:-.}/dags:/opt/airflow/dags
    - ${AIRFLOW_PROJ_DIR:-.}/logs:/opt/airflow/logs
    - ${AIRFLOW_PROJ_DIR:-.}/plugins:/opt/airflow/plugins
    - ${AIRFLOW_PROJ_DIR:-.}/.env:/opt/airflow/app/.env # Mount .env inside app dir

  # --- User ---
  # user: "${AIRFLOW_UID:-50000}:0" # Keep commented out to run as root for now

  # --- Dependencies ---
  depends_on:
    &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy

services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow # Single DB for both Airflow and MLflow metadata
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always

  redis:
    image: redis:7.2-bookworm
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always

  # --- MLFLOW SERVER SERVICE ---
  mlflow-server:
    image: python:3.9-slim
    container_name: personaltrainerai-mlflow-server-1
    environment:
      MLFLOW_BACKEND_STORE_URI: postgresql+psycopg2://airflow:airflow@postgres/airflow
      MLFLOW_ARTIFACT_ROOT: ${MLFLOW_ARTIFACT_ROOT:-gs://ragllm-454718-mlflow-artifacts}
    volumes: []
    command: >
      bash -c "pip install mlflow psycopg2-binary google-cloud-storage &&
               echo 'Starting MLflow server...' &&
               mlflow server \
                --host 0.0.0.0 \
                --port 5000 \
                --backend-store-uri $$MLFLOW_BACKEND_STORE_URI \
                --default-artifact-root $$MLFLOW_ARTIFACT_ROOT"
    ports:
      - "5001:5000"
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
  # --- END MLFLOW SERVER SERVICE ---

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
      mlflow-server:
         condition: service_started

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      # Updated healthcheck port for scheduler in Airflow 2.9+
      test: ["CMD", "curl", "--fail", "http://localhost:8973/health"] # Airflow 2.9+ uses 8973 by default
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s # Increase start period to allow more time for init
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
      mlflow-server:
         condition: service_started

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    environment:
      <<: *airflow-common-env # Inherit common environment variables
      DUMB_INIT_SETSID: "0"
      # --- OVERRIDE: Add worker-specific heavy requirements ---
      # Includes base requirements PLUS heavy ML/Eval libraries
      _PIP_ADDITIONAL_REQUIREMENTS: "${_PIP_ADDITIONAL_REQUIREMENTS:-apache-airflow-providers-postgres apache-airflow-providers-redis apache-airflow-providers-celery psycopg2-binary redis celery>=5.2.0 beautifulsoup4 PyPDF2 pinecone python-dotenv mlflow google-cloud-storage dvc[gs] requests==2.31.0 gunicorn} langchain langchain-openai langchain_community langchain_huggingface openai ragas deepseek langsmith scikit-learn numpy pandas tqdm matplotlib sentence-transformers torch transformers datasets" # Append worker-specific libraries here
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
      mlflow-server:
         condition: service_started

  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
      mlflow-server:
         condition: service_started

  # --- AIRFLOW INIT SERVICE (No changes needed here from previous version) ---
  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    command:
      - -c
      - |
        # [...] Keep existing resource checks and warnings [...]
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          # [...] Keep warnings [...]
          echo
        fi
        # [...] Keep resource checks [...]

        mkdir -p /sources/logs /sources/dags /sources/plugins
        echo "Attempting to make /sources/logs writable..."
        chmod -R 777 /sources/logs || echo "WARN: Failed to chmod /sources/logs"

        if [[ -n "${AIRFLOW_UID}" ]]; then
          echo "Changing ownership of /sources/* to ${AIRFLOW_UID}:0"
          chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins} || echo "WARN: Failed to chown /sources"
        else
           echo "Skipping chown as AIRFLOW_UID is not set."
        fi

        mkdir -p /opt/airflow/logs /opt/airflow/dags /opt/airflow/plugins

        # Continue with Airflow initialization checks
        exec /entrypoint airflow version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-Vinyas}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-Vinyas}
      _PIP_ADDITIONAL_REQUIREMENTS: '' # Don't install extra deps in init
    user: "0:0" # Run init as root
    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}:/sources
  # --- END AIRFLOW INIT SERVICE ---

  airflow-cli:
    <<: *airflow-common
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    command:
      - bash
      - -c
      - airflow

  flower:
    <<: *airflow-common
    command: celery flower
    profiles:
      - flower
    ports:
      - "5555:5555"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
      mlflow-server:
        condition: service_started

volumes:
  postgres-db-volume: