# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# Airflow + MLflow Docker Compose Configuration
# Uses CeleryExecutor, Redis, PostgreSQL
# Deploys Airflow components and a dedicated MLflow Tracking Server
---
version: '3.8' # Added compose file version

# Common configuration reusable across Airflow services
x-airflow-common:
  &airflow-common
  image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.9.2-python3.9}
  environment:
    &airflow-common-env
    PYTHONDONTWRITEBYTECODE: "1"
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-apache-airflow-providers-postgres apache-airflow-providers-redis apache-airflow-providers-celery psycopg2-binary redis celery>=5.2.0 beautifulsoup4 PyPDF2 pinecone python-dotenv mlflow google-cloud-storage dvc[gs] requests==2.31.0 gunicorn}
    OPENAI_API_KEY: ${OPENAI_API_KEY}
    LANGSMITH_API_KEY: ${LANGSMITH_API_KEY}
    LANGSMITH_PROJECT: ${LANGSMITH_PROJECT}
    LANGSMITH_TRACING: ${LANGSMITH_TRACING}
    PINECONE_API_KEY: ${PINECONE_API_KEY}
    PINECONE_INDEX_NAME: ${PINECONE_INDEX_NAME}
    PINECONE_ENVIRONMENT: ${PINECONE_ENVIRONMENT}
    HEVY_API_KEY: ${HEVY_API_KEY}
    MLFLOW_TRACKING_URI: ${MLFLOW_TRACKING_URI:-http://mlflow-server:5000}
    MLFLOW_ARTIFACT_ROOT: ${MLFLOW_ARTIFACT_ROOT:-gs://ragllm-454718-mlflow-artifacts}

  volumes:
    - ${AIRFLOW_PROJ_DIR:-.}:/opt/airflow/app:rw
    - ${AIRFLOW_PROJ_DIR:-.}/dags:/opt/airflow/dags:ro
    - ${AIRFLOW_PROJ_DIR:-.}/logs:/opt/airflow/logs:rw
    - ${AIRFLOW_PROJ_DIR:-.}/plugins:/opt/airflow/plugins:ro
    - ${AIRFLOW_PROJ_DIR:-.}/.env:/opt/airflow/app/.env:ro

  networks:
    - airflow_net

  # --- CORRECTED depends_on format within the anchor ---
  depends_on:
    &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy
  # --- END CORRECTION ---

services:
  postgres:
    image: postgres:13
    container_name: personaltrainerai-postgres-1
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s; retries: 5; start_period: 5s
    restart: always
    networks:
      - airflow_net

  redis:
    image: redis:7.2-bookworm
    container_name: personaltrainerai-redis-1
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s; timeout: 30s; retries: 50; start_period: 30s
    restart: always
    networks:
      - airflow_net

  mlflow-server:
    image: python:3.9-slim
    container_name: personaltrainerai-mlflow-server-1
    environment:
      MLFLOW_BACKEND_STORE_URI: postgresql+psycopg2://airflow:airflow@postgres/airflow
      MLFLOW_ARTIFACT_ROOT: ${MLFLOW_ARTIFACT_ROOT:-gs://ragllm-454718-mlflow-artifacts}
    volumes: []
    command: >
      bash -c "echo 'Ensuring pip...' && python3 -m ensurepip --upgrade && \
               echo 'Installing MLflow deps...' && pip install --no-cache-dir mlflow psycopg2-binary google-cloud-storage && \
               echo 'Starting MLflow server...' && \
               mlflow server \
                --host 0.0.0.0 \
                --port 5000 \
                --backend-store-uri $$MLFLOW_BACKEND_STORE_URI \
                --default-artifact-root $$MLFLOW_ARTIFACT_ROOT"
    ports:
      - "5001:5000"
    restart: always
    networks:
      - airflow_net
    depends_on: # Uses block style directly
      postgres:
        condition: service_healthy

  airflow-webserver:
    <<: *airflow-common
    container_name: personaltrainerai-airflow-webserver-1
    command: webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s; timeout: 10s; retries: 5; start_period: 30s
    restart: always
    depends_on: # Uses anchor AND adds specific dependencies in block style
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
      mlflow-server:
        condition: service_started

  airflow-scheduler:
    <<: *airflow-common
    container_name: personaltrainerai-airflow-scheduler-1
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8973/health"]
      interval: 30s; timeout: 10s; retries: 5; start_period: 60s
    restart: always
    depends_on: # Uses anchor AND adds specific dependencies in block style
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
      mlflow-server:
        condition: service_started

  airflow-worker:
    <<: *airflow-common
    container_name: personaltrainerai-airflow-worker-1
    command: celery worker
    healthcheck:
      test: ["CMD-SHELL", 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"']
      interval: 30s; timeout: 10s; retries: 5; start_period: 60s
    environment:
      <<: *airflow-common-env
      DUMB_INIT_SETSID: "0"
      _PIP_ADDITIONAL_REQUIREMENTS: "${_PIP_ADDITIONAL_REQUIREMENTS} langchain langchain-openai langchain_community langchain_huggingface openai ragas deepseek langsmith scikit-learn numpy pandas tqdm matplotlib sentence-transformers torch transformers datasets"
    restart: always
    depends_on: # Uses anchor AND adds specific dependencies in block style
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
      mlflow-server:
        condition: service_started

  airflow-triggerer:
    <<: *airflow-common
    container_name: personaltrainerai-airflow-triggerer-1
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s; timeout: 10s; retries: 5; start_period: 30s
    restart: always
    depends_on: # Uses anchor AND adds specific dependencies in block style
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
      mlflow-server:
        condition: service_started

  airflow-init:
    image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.9.2-python3.9}
    container_name: personaltrainerai-airflow-init-1
    entrypoint: /bin/bash
    command:
      - -c
      - |
        set -e
        echo "Airflow Init: Starting initialization..."
        mkdir -p /sources/logs /sources/dags /sources/plugins /opt/airflow/logs /opt/airflow/dags /opt/airflow/plugins
        chmod -R 777 /sources/logs || echo "WARN: Failed chmod /sources/logs"
        if [[ -n "${AIRFLOW_UID}" && "${AIRFLOW_UID}" != "0" ]]; then
          echo "Changing ownership for AIRFLOW_UID=${AIRFLOW_UID}..."
          chown -R "${AIRFLOW_UID}:0" /sources/logs /sources/dags /sources/plugins || echo "WARN: Failed chown /sources"
        fi
        echo "Installing psycopg2..."
        pip install --no-cache-dir psycopg2-binary
        echo "Running Airflow DB migrate..."
        airflow db migrate
        echo "Creating Airflow Admin User (user: ${_AIRFLOW_WWW_USER_USERNAME:-admin})..."
        airflow users create \
            --username "${_AIRFLOW_WWW_USER_USERNAME:-admin}" \
            --password "${_AIRFLOW_WWW_USER_PASSWORD:-admin}" \
            --firstname "${_AIRFLOW_WWW_USER_FIRSTNAME:-Default}" \
            --lastname "${_AIRFLOW_WWW_USER_LASTNAME:-User}" \
            --role "${_AIRFLOW_WWW_USER_ROLE:-Admin}" \
            --email "${_AIRFLOW_WWW_USER_EMAIL:-admin@example.com}" || \
        echo "Admin user likely already exists."
        echo "Airflow Init: Initialization complete."
    environment:
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      _AIRFLOW_WWW_USER_USERNAME: ${AIRFLOW_WWW_USER_USERNAME:-Vinyas}
      _AIRFLOW_WWW_USER_PASSWORD: ${AIRFLOW_WWW_USER_PASSWORD:-Vinyas}
      _AIRFLOW_WWW_USER_FIRSTNAME: ${_AIRFLOW_WWW_USER_FIRSTNAME:-Vinyas}
      _AIRFLOW_WWW_USER_LASTNAME: ${_AIRFLOW_WWW_USER_LASTNAME:-N}
      _AIRFLOW_WWW_USER_ROLE: ${_AIRFLOW_WWW_USER_ROLE:-Admin}
      _AIRFLOW_WWW_USER_EMAIL: ${_AIRFLOW_WWW_USER_EMAIL:-vinyas@example.com}
      AIRFLOW_UID: ${AIRFLOW_UID:-}
    user: "0:0"
    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}:/sources:rw
    networks:
      - airflow_net
    depends_on: # Uses block style directly
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  airflow-cli:
    <<: *airflow-common
    container_name: personaltrainerai-airflow-cli-1
    profiles: ["debug", "cli"]
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    command: ["bash"]
    tty: true

  flower:
    <<: *airflow-common
    container_name: personaltrainerai-flower-1
    command: celery flower
    profiles: ["flower"]
    ports:
      - "5555:5555"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 30s; timeout: 10s; retries: 5; start_period: 30s
    restart: always
    depends_on: # Uses anchor AND adds specific dependencies in block style
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
      mlflow-server:
        condition: service_started

# --- Define the network ---
networks:
  airflow_net: # Define the network name
    driver: bridge # Use standard bridge driver

volumes:
  postgres-db-volume: # Define the named volume for Postgres data persistence